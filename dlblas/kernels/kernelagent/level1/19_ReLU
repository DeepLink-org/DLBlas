import math
import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def _relu_kernel(
    x_ptr,
    output_ptr,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    x = tl.load(x_ptr + offsets, mask=mask)
    zero = tl.zeros_like(x)
    output = tl.where(x > zero, x, zero)
    tl.store(output_ptr + offsets, output, mask=mask)

class ModelNew(nn.Module):
    """
    Simple model that performs a ReLU activation.
    """
    def __init__(self):
        super(ModelNew, self).__init__()
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        """
        Applies ReLU activation to the input tensor.

        Args:
            x (torch.Tensor): Input tensor of any shape.

        Returns:
            torch.Tensor: Output tensor with ReLU applied, same shape as input.
        """
        if x.is_contiguous():
            output = torch.empty_like(x)
            n_elements = x.numel()
            grid = (triton.cdiv(n_elements, 1024),)
            _relu_kernel[grid](x, output, n_elements, BLOCK_SIZE=1024)
            return output
        else:
            return torch.relu(x)

batch_size = 16
dim = 16384

def get_inputs():
    x = torch.randn(batch_size, dim)
    return [x]

def get_init_inputs():
    return []  # No special initialization inputs needed
