import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def elu_kernel(
    x_ptr,
    output_ptr,
    alpha,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    
    x = tl.load(x_ptr + offsets, mask=mask)
    zero = tl.zeros_like(x)
    condition = x > zero
    elu_result = tl.where(condition, x, alpha * (tl.exp(x) - 1.0))
    tl.store(output_ptr + offsets, elu_result, mask=mask)

class ModelNew(nn.Module):
    def __init__(self, alpha: float = 1.0):
        super(ModelNew, self).__init__()
        self.alpha = alpha
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        x = x.contiguous()
        output = torch.empty_like(x)
        n_elements = x.numel()
        grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)
        elu_kernel[grid](x, output, self.alpha, n_elements, BLOCK_SIZE=1024)
        return output

batch_size = 16
dim = 16384

def get_inputs():
    x = torch.randn(batch_size, dim, device='cuda')
    return [x]

def get_init_inputs():
    return [1.0]
