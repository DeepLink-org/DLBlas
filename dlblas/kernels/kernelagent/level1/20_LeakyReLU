import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def leaky_relu_kernel(
    x_ptr,
    output_ptr,
    negative_slope,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    # Vectorized load (8 elements per thread)
    x = tl.load(x_ptr + offsets, mask=mask, other=0.0)
    # Efficient vectorized computation
    output = tl.where(x >= 0, x, negative_slope * x)
    # Vectorized store (8 elements per thread)
    tl.store(output_ptr + offsets, output, mask=mask)

class ModelNew(nn.Module):
    def __init__(self, negative_slope: float = 0.01):
        super(ModelNew, self).__init__()
        self.negative_slope = negative_slope
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        # Ensure contiguous memory access
        if not x.is_contiguous():
            x = x.contiguous()
            
        n_elements = x.numel()
        output = torch.empty_like(x)
        
        if n_elements == 0:
            return output
            
        # Optimized parameters for H100 (SM8.9)
        BLOCK_SIZE = 2048  # Larger block for better utilization
        grid = (triton.cdiv(n_elements, BLOCK_SIZE),)
        leaky_relu_kernel[grid](
            x, 
            output, 
            self.negative_slope,
            n_elements,
            BLOCK_SIZE=BLOCK_SIZE,
            num_warps=32,
            num_stages=4
        )
        return output

batch_size = 16
dim = 16384

def get_inputs():
    x = torch.randn(batch_size, dim, device='cuda')
    return [x]

def get_init_inputs():
    return []
