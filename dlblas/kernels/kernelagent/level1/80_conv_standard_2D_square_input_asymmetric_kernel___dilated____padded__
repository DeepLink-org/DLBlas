import torch
import torch.nn as nn
import triton
import triton.language as tl
import math

@triton.jit
def _conv2d_forward(
    x_ptr,
    weight_ptr,
    bias_ptr,
    output_ptr,
    batch_size,
    in_channels,
    height,
    width,
    out_channels,
    kernel_h,
    kernel_w,
    stride_h,
    stride_w,
    padding_h,
    padding_w,
    dilation_h,
    dilation_w,
    output_height,
    output_width,
    x_batch_stride,
    x_inchannel_stride,
    x_height_stride,
    x_width_stride,
    weight_out_stride,
    weight_in_stride,
    weight_kh_stride,
    weight_kw_stride,
    bias_stride,
    output_batch_stride,
    output_channel_stride,
    output_h_stride,
    output_w_stride,
    has_bias: tl.constexpr,
    total_elements: tl.constexpr
):
    pid = tl.program_id(0)
    if pid >= total_elements:
        return
    
    # Calculate output indices
    elements_per_batch = out_channels * output_height * output_width
    b = pid // elements_per_batch
    pid2 = pid % elements_per_batch
    oc = pid2 // (output_height * output_width)
    pid3 = pid2 % (output_height * output_width)
    oh = pid3 // output_width
    ow = pid3 % output_width
    
    accumulator = 0.0
    
    # Loop through input channels and kernel
    for ic in range(in_channels):
        for kh in range(kernel_h):
            for kw in range(kernel_w):
                # Calculate input position with dilation
                h_index = oh * stride_h - padding_h + kh * dilation_h
                w_index = ow * stride_w - padding_w + kw * dilation_w
                
                # Check boundaries
                if h_index >= 0 and h_index < height and w_index >= 0 and w_index < width:
                    # Compute input offset with proper strides
                    x_offset = b * x_batch_stride + ic * x_inchannel_stride + h_index * x_height_stride + w_index * x_width_stride
                    input_val = tl.load(x_ptr + x_offset)
                else:
                    input_val = 0.0
                
                # Compute weight offset
                weight_offset = oc * weight_out_stride + ic * weight_in_stride + kh * weight_kh_stride + kw * weight_kw_stride
                weight_val = tl.load(weight_ptr + weight_offset)
                
                accumulator += input_val * weight_val
    
    # Add bias if present
    if has_bias:
        bias_val = tl.load(bias_ptr + oc * bias_stride)
        accumulator += bias_val
    
    # Compute output offset
    output_offset = b * output_batch_stride + oc * output_channel_stride + oh * output_h_stride + ow * output_w_stride
    tl.store(output_ptr + output_offset, accumulator)

class ModelNew(nn.Module):
    def __init__(self, in_channels: int, out_channels: int, kernel_size: tuple, stride: int = 1, padding: tuple = (0, 0), dilation: tuple = (1, 1), bias: bool = False):
        super(ModelNew, self).__init__()
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.kernel_size = kernel_size
        self.stride = stride
        self.padding = padding
        self.dilation = dilation
        
        self.weight = nn.Parameter(torch.empty(out_channels, in_channels, kernel_size[0], kernel_size[1]))
        if bias:
            self.bias = nn.Parameter(torch.empty(out_channels))
        else:
            self.register_parameter('bias', None)
            
        nn.init.kaiming_uniform_(self.weight, a=math.sqrt(5))
        if self.bias is not None:
            fan_in, _ = nn.init._calculate_fan_in_and_fan_out(self.weight)
            bound = 1 / math.sqrt(fan_in) if fan_in > 0 else 0
            nn.init.uniform_(self.bias, -bound, bound)
        
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        batch_size, _, height, width = x.shape
        output_height = (height + 2 * self.padding[0] - self.dilation[0] * (self.kernel_size[0] - 1) - 1) // self.stride + 1
        output_width = (width + 2 * self.padding[1] - self.dilation[1] * (self.kernel_size[1] - 1) - 1) // self.stride + 1
        
        # Prepare output tensor
        output = torch.empty((batch_size, self.out_channels, output_height, output_width), 
                             device=x.device, dtype=x.dtype)
        
        # Prepare bias tensor
        bias_tensor = self.bias if self.bias is not None else torch.empty(0, device=x.device, dtype=x.dtype)
        
        # Calculate total output elements
        total_elements = batch_size * self.out_channels * output_height * output_width
        
        # Launch kernel
        grid = (triton.cdiv(total_elements, 1),)
        _conv2d_forward[grid](
            x, self.weight, bias_tensor, output,
            batch_size, self.in_channels, height, width,
            self.out_channels, self.kernel_size[0], self.kernel_size[1],
            self.stride, self.stride, self.padding[0], self.padding[1], 
            self.dilation[0], self.dilation[1],
            output_height, output_width,
            x.stride(0), x.stride(1), x.stride(2), x.stride(3),
            self.weight.stride(0), self.weight.stride(1), 
            self.weight.stride(2), self.weight.stride(3),
            bias_tensor.stride(0) if self.bias is not None else 0,
            output.stride(0), output.stride(1), output.stride(2), output.stride(3),
            self.bias is not None,
            total_elements
        )
        
        return output

# Test code
batch_size = 16
in_channels = 3
out_channels = 64
kernel_size = (3, 5) # Asymmetric kernel
width = 256
height = 256
stride = 1
padding = (1, 2) # Asymmetric padding
dilation = (2, 1) # Asymmetric dilation

def get_inputs():
    x = torch.randn(batch_size, in_channels, height, width)
    return [x]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, stride, padding, dilation]
