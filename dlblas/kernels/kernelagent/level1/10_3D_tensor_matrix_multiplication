import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.autotune(
    configs=[
        triton.Config({'BLOCK_M': 64, 'BLOCK_L': 64, 'BLOCK_K': 64}, num_warps=4, num_stages=4),
        triton.Config({'BLOCK_M': 64, 'BLOCK_L': 128, 'BLOCK_K': 64}, num_warps=4, num_stages=3),
        triton.Config({'BLOCK_M': 128, 'BLOCK_L': 64, 'BLOCK_K': 64}, num_warps=4, num_stages=3),
        triton.Config({'BLOCK_M': 128, 'BLOCK_L': 128, 'BLOCK_K': 64}, num_warps=8, num_stages=3),
        triton.Config({'BLOCK_M': 64, 'BLOCK_L': 64, 'BLOCK_K': 128}, num_warps=4, num_stages=3),
    ],
    key=['M', 'K', 'L'],
)
@triton.jit
def _matmul_kernel(
    A_ptr, B_ptr, C_ptr,
    N, M, K, L,
    stride_An, stride_Am, stride_Ak,
    stride_Bk, stride_Bl,
    stride_Cn, stride_Cm, stride_Cl,
    BLOCK_M: tl.constexpr, BLOCK_L: tl.constexpr, BLOCK_K: tl.constexpr,
):
    pid_n = tl.program_id(0)
    pid_m = tl.program_id(1)
    pid_l = tl.program_id(2)
    
    if pid_n >= N:
        return
    
    # Create block offsets with proper masking
    m_offsets = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)
    l_offsets = pid_l * BLOCK_L + tl.arange(0, BLOCK_L)
    k_offsets = tl.arange(0, BLOCK_K)
    
    # Initialize accumulator
    acc = tl.zeros((BLOCK_M, BLOCK_L), dtype=tl.float32)
    
    # Compute pointer bases
    a_base = A_ptr + pid_n * stride_An
    b_base = B_ptr
    c_base = C_ptr + pid_n * stride_Cn
    
    # Blocked matrix multiplication
    for k in range(0, tl.cdiv(K, BLOCK_K)):
        # Compute current K block
        k_start = k * BLOCK_K
        
        # Load A block with coalesced access
        a_ptrs = a_base + m_offsets[:, None] * stride_Am + (k_start + k_offsets[None, :]) * stride_Ak
        a_mask = (m_offsets[:, None] < M) & ((k_start + k_offsets[None, :]) < K)
        a = tl.load(a_ptrs, mask=a_mask, other=0.0)
        
        # Load B block with coalesced access
        b_ptrs = b_base + (k_start + k_offsets[:, None]) * stride_Bk + l_offsets[None, :] * stride_Bl
        b_mask = ((k_start + k_offsets[:, None]) < K) & (l_offsets[None, :] < L)
        b = tl.load(b_ptrs, mask=b_mask, other=0.0)
        
        # Accumulate matrix product with full FP32 precision
        acc += tl.dot(a, b, allow_tf32=False)
    
    # Store result with masking
    c_ptrs = c_base + m_offsets[:, None] * stride_Cm + l_offsets[None, :] * stride_Cl
    c_mask = (m_offsets[:, None] < M) & (l_offsets[None, :] < L)
    tl.store(c_ptrs, acc, mask=c_mask)

class ModelNew(nn.Module):
    def __init__(self):
        super(ModelNew, self).__init__()
    
    def forward(self, A, B):
        N, M, K = A.shape
        L = B.shape[1]
        A = A.contiguous()
        B = B.contiguous()
        C = torch.empty((N, M, L), device=A.device, dtype=A.dtype)
        
        # Dynamic grid using autotuner meta-parameters
        grid = lambda meta: (
            N,
            triton.cdiv(M, meta['BLOCK_M']),
            triton.cdiv(L, meta['BLOCK_L'])
        )
        
        # Launch kernel without overriding autotuned parameters
        _matmul_kernel[grid](
            A, B, C,
            N, M, K, L,
            A.stride(0), A.stride(1), A.stride(2),
            B.stride(0), B.stride(1),
            C.stride(0), C.stride(1), C.stride(2),
        )
        return C

N = 16
M = 1024
K = 2048
L = 768

def get_inputs():
    A = torch.randn(N, M, K, device='cuda')
    B = torch.randn(K, L, device='cuda')
    return [A, B]

def get_init_inputs():
    return []
