import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def _matmul_lower_tri_kernel(
    A_ptr, B_ptr, C_ptr,
    N, stride_am, stride_ak,
    stride_bk, stride_bn,
    stride_cm, stride_cn,
    BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, BLOCK_K: tl.constexpr,
):
    pid0 = tl.program_id(0)
    pid1 = tl.program_id(1)
    
    offs_m = pid0 * BLOCK_M + tl.arange(0, BLOCK_M)
    offs_n = pid1 * BLOCK_N + tl.arange(0, BLOCK_N)
    offs_k = tl.arange(0, BLOCK_K)
    
    a_ptrs = A_ptr + offs_m[:, None] * stride_am + offs_k[None, :] * stride_ak
    b_ptrs = B_ptr + offs_k[:, None] * stride_bk + offs_n[None, :] * stride_bn
    
    acc = tl.zeros((BLOCK_M, BLOCK_N), dtype=tl.float32)
    
    for k in range(0, tl.cdiv(N, BLOCK_K)):
        k_offs = k * BLOCK_K
        a_mask = (offs_m[:, None] < N) & ((k_offs + offs_k)[None, :] < N)
        b_mask = ((k_offs + offs_k)[:, None] < N) & (offs_n[None, :] < N)
        
        a = tl.load(a_ptrs, mask=a_mask, other=0.0)
        b = tl.load(b_ptrs, mask=b_mask, other=0.0)
        
        # Use full FP32 precision for numerical correctness
        acc += tl.dot(a, b, allow_tf32=False)
        
        a_ptrs += BLOCK_K * stride_ak
        b_ptrs += BLOCK_K * stride_bk

    offs_m = pid0 * BLOCK_M + tl.arange(0, BLOCK_M)
    offs_n = pid1 * BLOCK_N + tl.arange(0, BLOCK_N)
    
    c_ptrs = C_ptr + offs_m[:, None] * stride_cm + offs_n[None, :] * stride_cn
    c_mask = (offs_m[:, None] < N) & (offs_n[None, :] < N) & (offs_m[:, None] >= offs_n[None, :])
    tl.store(c_ptrs, acc, mask=c_mask)

class ModelNew(nn.Module):
    def __init__(self):
        super(ModelNew, self).__init__()
    
    def forward(self, A, B):
        assert A.dim() == 2 and B.dim() == 2, "Inputs must be 2D matrices"
        assert A.shape[1] == B.shape[0], "Matrix dimensions mismatch"
        N = A.size(0)
        C = torch.zeros((N, N), device=A.device, dtype=A.dtype)
        
        grid = lambda META: (
            triton.cdiv(N, META['BLOCK_M']),
            triton.cdiv(N, META['BLOCK_N'])
        )
        
        _matmul_lower_tri_kernel[grid](
            A, B, C,
            N, 
            A.stride(0), A.stride(1),
            B.stride(0), B.stride(1),
            C.stride(0), C.stride(1),
            BLOCK_M=64, BLOCK_N=64, BLOCK_K=32
        )
        return C

M = 4096

def get_inputs():
    A = torch.randn(M, M)
    B = torch.randn(M, M)
    A = torch.tril(A)
    B = torch.tril(B)
    return [A, B]

def get_init_inputs():
    return []  # No special initialization inputs needed
