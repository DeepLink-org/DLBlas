import torch
import torch.nn as nn
import triton
import triton.language as tl
import math

@triton.jit
def conv_transpose2d_kernel(
    # Input tensor pointers
    x_ptr,
    # Weight tensor pointer
    weight_ptr,
    # Output tensor pointer
    output_ptr,
    # Tensor dimensions
    batch_size, in_channels, height, width,
    out_channels, out_height, out_width,
    # Convolution parameters
    stride_h, stride_w,
    padding_h, padding_w,
    dilation_h, dilation_w,
    kernel_h, kernel_w,
    groups,
    # Tensor strides
    x_batch_stride, x_channel_stride, x_height_stride, x_width_stride,
    weight_in_stride, weight_out_stride, weight_h_stride, weight_w_stride,
    output_batch_stride, output_channel_stride, output_height_stride, output_width_stride,
    # Block size for computation
    BLOCK_SIZE: tl.constexpr,
    # Total number of elements in output
    total_output_elements: tl.constexpr
):
    # Get the program ID
    pid = tl.program_id(0)
    # Compute the starting index for this block
    start_idx = pid * BLOCK_SIZE
    # Create a range of indices for this block
    indices = start_idx + tl.arange(0, BLOCK_SIZE)
    # Mask for valid indices
    mask = indices < total_output_elements
    
    # Compute 4D indices (batch, channel, height, width) from linear index
    n = indices // (out_channels * out_height * out_width)
    remainder = indices % (out_channels * out_height * out_width)
    c_out = remainder // (out_height * out_width)
    remainder2 = remainder % (out_height * out_width)
    h_out = remainder2 // out_width
    w_out = remainder2 % out_width

    # Calculate group information
    group_id = c_out // (out_channels // groups)
    c_out_in_group = c_out % (out_channels // groups)
    group_start = group_id * (in_channels // groups)
    group_end = (group_id + 1) * (in_channels // groups)
    in_channels_per_group = in_channels // groups

    # Initialize accumulator
    acc = tl.zeros((BLOCK_SIZE,), dtype=tl.float32)
    
    # Loop over kernel positions
    for k_h in range(kernel_h):
        for k_w in range(kernel_w):
            # Compute corresponding input position
            h_in = (h_out + padding_h - k_h * dilation_h) / stride_h
            w_in = (w_out + padding_w - k_w * dilation_w) / stride_w
            
            # Check if input position is integer and within bounds
            h_in_int = tl.floor(h_in)
            w_in_int = tl.floor(w_in)
            valid_h = (h_in == h_in_int) & (h_in_int >= 0) & (h_in_int < height)
            valid_w = (w_in == w_in_int) & (w_in_int >= 0) & (w_in_int < width)
            valid_pos = valid_h & valid_w
            
            # Convert to integer if valid
            h_in_int = tl.where(valid_pos, tl.cast(h_in_int, tl.int32), 0)
            w_in_int = tl.where(valid_pos, tl.cast(w_in_int, tl.int32), 0)
            
            # Loop over input channels in the group
            for c_in_offset in range(0, in_channels_per_group):
                c_in = group_start + c_in_offset
                # Compute input index
                x_idx = (n * x_batch_stride + 
                         c_in * x_channel_stride + 
                         h_in_int * x_height_stride + 
                         w_in_int * x_width_stride)
                # Load input value
                x_val = tl.load(x_ptr + x_idx, mask=valid_pos & mask, other=0.0)
                
                # Compute weight index
                weight_idx = (c_in * weight_in_stride + 
                              c_out_in_group * weight_out_stride + 
                              k_h * weight_h_stride + 
                              k_w * weight_w_stride)
                # Load weight value
                weight_val = tl.load(weight_ptr + weight_idx)
                
                # Accumulate
                acc += tl.where(valid_pos & mask, x_val * weight_val, 0.0)
    
    # Compute output index
    output_idx = (n * output_batch_stride + 
                  c_out * output_channel_stride + 
                  h_out * output_height_stride + 
                  w_out * output_width_stride)
    # Store result
    tl.store(output_ptr + output_idx, acc, mask=mask)

class ModelNew(nn.Module):
    def __init__(self, in_channels: int, out_channels: int, kernel_size: tuple, stride: tuple = (1, 1), padding: tuple = (0, 0), dilation: tuple = (1, 1), groups: int = 1, bias: bool = False):
        super(ModelNew, self).__init__()
        # Save parameters
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.kernel_size = kernel_size
        self.stride = stride
        self.padding = padding
        self.dilation = dilation
        self.groups = groups
        
        # Validate groups
        assert in_channels % groups == 0, "in_channels must be divisible by groups"
        assert out_channels % groups == 0, "out_channels must be divisible by groups"
        
        # Create weight parameter
        self.weight = nn.Parameter(torch.empty(
            in_channels,
            out_channels // groups,
            kernel_size[0],
            kernel_size[1]
        ))
        
        # Create bias parameter if needed
        self.bias = nn.Parameter(torch.empty(out_channels)) if bias else None
        
        # Initialize parameters
        self.reset_parameters()
    
    def reset_parameters(self):
        # Initialize weight
        nn.init.kaiming_uniform_(self.weight, a=math.sqrt(5))
        # Initialize bias
        if self.bias is not None:
            fan_in, _ = nn.init._calculate_fan_in_and_fan_out(self.weight)
            bound = 1 / math.sqrt(fan_in) if fan_in > 0 else 0
            nn.init.uniform_(self.bias, -bound, bound)
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        # Compute output spatial dimensions
        h_out = (x.shape[2] - 1) * self.stride[0] - 2 * self.padding[0] + self.dilation[0] * (self.kernel_size[0] - 1) + 1
        w_out = (x.shape[3] - 1) * self.stride[1] - 2 * self.padding[1] + self.dilation[1] * (self.kernel_size[1] - 1) + 1
        
        # Create output tensor
        output = torch.empty(
            x.shape[0], 
            self.out_channels, 
            h_out, 
            w_out, 
            device=x.device, 
            dtype=x.dtype
        )
        
        # Calculate total number of output elements
        total_output_elements = output.numel()
        
        # Set block size for kernel
        BLOCK_SIZE = 128
        
        # Define grid of kernel blocks
        grid = (triton.cdiv(total_output_elements, BLOCK_SIZE),)
        
        # Get tensor strides
        x_stride = x.stride()
        weight_stride = self.weight.stride()
        output_stride = output.stride()
        
        # Launch kernel
        conv_transpose2d_kernel[grid](
            x, self.weight, output,
            # Tensor dimensions
            x.shape[0], self.in_channels, x.shape[2], x.shape[3],
            self.out_channels, h_out, w_out,
            # Convolution parameters
            self.stride[0], self.stride[1],
            self.padding[0], self.padding[1],
            self.dilation[0], self.dilation[1],
            self.kernel_size[0], self.kernel_size[1],
            self.groups,
            # Tensor strides
            x_stride[0], x_stride[1], x_stride[2], x_stride[3],
            weight_stride[0], weight_stride[1], weight_stride[2], weight_stride[3],
            output_stride[0], output_stride[1], output_stride[2], output_stride[3],
            BLOCK_SIZE,
            total_output_elements
        )
        
        # Add bias if needed
        if self.bias is not None:
            output += self.bias.view(1, -1, 1, 1)
        
        return output

# Test code
batch_size = 16
in_channels = 32
out_channels = 64
kernel_size = (3, 5)
height = 128
width = 256
stride = (2, 3)
padding = (1, 2)
dilation = (2, 1)
groups = 4

def get_inputs():
    x = torch.randn(batch_size, in_channels, height, width)
    return [x]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, stride, padding, dilation, groups]
