import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def gelu_kernel(
    x_ptr,
    output_ptr,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    x = tl.load(x_ptr + offsets, mask=mask)
    # Exact GELU formulation matching PyTorch's default
    one_over_sqrt2 = 0.7071067811865475
    erf_val = tl.erf(x * one_over_sqrt2)
    output = 0.5 * x * (1.0 + erf_val)
    tl.store(output_ptr + offsets, output, mask=mask)

class ModelNew(nn.Module):
    def __init__(self):
        super(ModelNew, self).__init__()
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        if not x.is_cuda:
            return torch.nn.functional.gelu(x)
            
        x_contiguous = x.contiguous()
        output = torch.empty_like(x_contiguous)
        n_elements = x_contiguous.numel()
        
        if n_elements == 0:
            return output
            
        BLOCK_SIZE = 1024
        grid = (triton.cdiv(n_elements, BLOCK_SIZE),)
        gelu_kernel[grid](x_contiguous, output, n_elements, BLOCK_SIZE=BLOCK_SIZE)
        return output

batch_size = 16
dim = 16384

def get_inputs():
    x = torch.randn(batch_size, dim)
    return [x]

def get_init_inputs():
    return []
