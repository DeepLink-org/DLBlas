import torch
import torch.nn as nn
import triton
import triton.language as tl
import math

@triton.jit
def conv_transpose3d_kernel(
    input_ptr, weight_ptr, output_ptr,
    in_channels, out_channels, groups,
    D_in, H_in, W_in,
    D_out, H_out, W_out,
    kernel_size, stride, padding,
    input_bs, input_cs, input_ds, input_hs, input_ws,
    weight_ics, weight_ocs, weight_ds, weight_hs, weight_ws,
    output_bs, output_cs, output_ds, output_hs, output_ws,
    BLOCK_D: tl.constexpr, BLOCK_H: tl.constexpr, BLOCK_W: tl.constexpr
):
    pid_b = tl.program_id(0)
    pid_c = tl.program_id(1)
    pid_spatial = tl.program_id(2)
    
    # Calculate spatial blocks
    total_w_blocks = (W_out + BLOCK_W - 1) // BLOCK_W
    total_h_blocks = (H_out + BLOCK_H - 1) // BLOCK_H
    total_d_blocks = (D_out + BLOCK_D - 1) // BLOCK_D
    
    # Decompose spatial index
    pid_w = pid_spatial % total_w_blocks
    pid_h = (pid_spatial // total_w_blocks) % total_h_blocks
    pid_d = pid_spatial // (total_w_blocks * total_h_blocks)

    d_start = pid_d * BLOCK_D
    h_start = pid_h * BLOCK_H
    w_start = pid_w * BLOCK_W

    d_offsets = d_start + tl.arange(0, BLOCK_D)
    h_offsets = h_start + tl.arange(0, BLOCK_H)
    w_offsets = w_start + tl.arange(0, BLOCK_W)
    
    d_mask = d_offsets < D_out
    h_mask = h_offsets < H_out
    w_mask = w_offsets < W_out
    spatial_mask = d_mask[:, None, None] & h_mask[None, :, None] & w_mask[None, None, :]
    
    group_size = out_channels // groups
    group_idx = pid_c // group_size
    local_oc = pid_c % group_size
    
    acc = tl.zeros((BLOCK_D, BLOCK_H, BLOCK_W), dtype=tl.float32)
    
    ic_start = group_idx * (in_channels // groups)
    ic_end = ic_start + (in_channels // groups)
    
    for kd in range(kernel_size):
        for kh in range(kernel_size):
            for kw in range(kernel_size):
                d_in = (d_offsets - kd + padding)[:, None, None]
                h_in = (h_offsets - kh + padding)[None, :, None]
                w_in = (w_offsets - kw + padding)[None, None, :]
                
                valid_d = (d_in >= 0) & (d_in < D_in * stride) & (d_in % stride == 0)
                valid_h = (h_in >= 0) & (h_in < H_in * stride) & (h_in % stride == 0)
                valid_w = (w_in >= 0) & (w_in < W_in * stride) & (w_in % stride == 0)
                valid_mask = valid_d & valid_h & valid_w & spatial_mask
                
                d_in_idx = tl.where(valid_d, d_in // stride, 0)
                h_in_idx = tl.where(valid_h, h_in // stride, 0)
                w_in_idx = tl.where(valid_w, w_in // stride, 0)
                
                for ic in range(ic_start, ic_end):
                    input_vals = tl.load(
                        input_ptr + pid_b * input_bs + ic * input_cs + 
                        d_in_idx * input_ds + h_in_idx * input_hs + w_in_idx * input_ws,
                        mask=valid_mask,
                        other=0.0
                    )
                    
                    weight_val = tl.load(
                        weight_ptr + ic * weight_ics + local_oc * weight_ocs + 
                        kd * weight_ds + kh * weight_hs + kw * weight_ws
                    )
                    
                    acc += input_vals * weight_val

    output_offsets = (
        pid_b * output_bs + 
        pid_c * output_cs + 
        d_offsets[:, None, None] * output_ds + 
        h_offsets[None, :, None] * output_hs + 
        w_offsets[None, None, :] * output_ws
    )
    tl.store(output_ptr + output_offsets, acc, mask=spatial_mask)

class ModelNew(nn.Module):
    def __init__(self, in_channels: int, out_channels: int, kernel_size: int, 
                 stride: int = 1, padding: int = 0, output_padding: int = 0, 
                 groups: int = 1, bias: bool = False):
        super(ModelNew, self).__init__()
        self.in_channels = in_channels
        self.out_channels = out_channels
        self.kernel_size = kernel_size
        self.stride = stride
        self.padding = padding
        self.output_padding = output_padding
        self.groups = groups
        
        self.weight = nn.Parameter(torch.empty(
            in_channels, 
            out_channels // groups,
            kernel_size, kernel_size, kernel_size
        ))
        if bias:
            self.bias = nn.Parameter(torch.empty(out_channels))
        else:
            self.bias = None
            
        nn.init.kaiming_uniform_(self.weight, a=math.sqrt(5))
        if bias:
            bound = 1 / math.sqrt(in_channels * kernel_size**3)
            nn.init.uniform_(self.bias, -bound, bound)
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        B, C, D_in, H_in, W_in = x.shape
        D_out = (D_in - 1) * self.stride - 2 * self.padding + self.kernel_size + self.output_padding
        H_out = (H_in - 1) * self.stride - 2 * self.padding + self.kernel_size + self.output_padding
        W_out = (W_in - 1) * self.stride - 2 * self.padding + self.kernel_size + self.output_padding
        
        output = torch.empty((B, self.out_channels, D_out, H_out, W_out), 
                             device=x.device, dtype=x.dtype)
        
        # Optimized block sizes: increased width dimension for better memory access
        BLOCK_D, BLOCK_H, BLOCK_W = 4, 4, 8
        total_d_blocks = triton.cdiv(D_out, BLOCK_D)
        total_h_blocks = triton.cdiv(H_out, BLOCK_H)
        total_w_blocks = triton.cdiv(W_out, BLOCK_W)
        total_spatial_blocks = total_d_blocks * total_h_blocks * total_w_blocks
        
        grid = (B, self.out_channels, total_spatial_blocks)
        
        with torch.cuda.device(x.device.index):
            conv_transpose3d_kernel[grid](
                x, self.weight, output,
                self.in_channels, self.out_channels, self.groups,
                D_in, H_in, W_in,
                D_out, H_out, W_out,
                self.kernel_size, self.stride, self.padding,
                x.stride(0), x.stride(1), x.stride(2), x.stride(3), x.stride(4),
                self.weight.stride(0), self.weight.stride(1), 
                self.weight.stride(2), self.weight.stride(3), self.weight.stride(4),
                output.stride(0), output.stride(1), 
                output.stride(2), output.stride(3), output.stride(4),
                BLOCK_D=BLOCK_D, BLOCK_H=BLOCK_H, BLOCK_W=BLOCK_W
            )
        
        if self.bias is not None:
            output += self.bias[None, :, None, None, None]
            
        return output

# Test code
batch_size = 16
in_channels = 3
out_channels = 64
kernel_size = 3
depth = 32
height = 32
width = 32

def get_inputs():
    x = torch.randn(batch_size, in_channels, depth, height, width)
    return [x]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size]
