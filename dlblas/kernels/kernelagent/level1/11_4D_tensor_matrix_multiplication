import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.autotune(
    configs=[
        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 256, 'BLOCK_SIZE_K': 32}, num_warps=4, num_stages=4),
        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32}, num_warps=4, num_stages=4),
        triton.Config({'BLOCK_SIZE_M': 256, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32}, num_warps=8, num_stages=3),
        triton.Config({'BLOCK_SIZE_M': 256, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32}, num_warps=4, num_stages=4),
    ],
    key=['M', 'N', 'K'],
)
@triton.jit
def _triton_matmul(
    a_ptr, b_ptr, c_ptr,
    M, N, K,
    stride_am, stride_ak,
    stride_bk, stride_bn,
    stride_cm, stride_cn,
    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,
):
    pid_m = tl.program_id(0)
    pid_n = tl.program_id(1)
    
    rm = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)
    rn = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)
    
    acc = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)
    
    for k in range(0, tl.cdiv(K, BLOCK_SIZE_K)):
        rk = k * BLOCK_SIZE_K + tl.arange(0, BLOCK_SIZE_K)
        a_mask = (rm[:, None] < M) & (rk[None, :] < K)
        b_mask = (rk[:, None] < K) & (rn[None, :] < N)
        
        a = tl.load(a_ptr + rm[:, None] * stride_am + rk[None, :] * stride_ak, 
                    mask=a_mask, other=0.0)
        b = tl.load(b_ptr + rk[:, None] * stride_bk + rn[None, :] * stride_bn, 
                    mask=b_mask, other=0.0)
        acc += tl.dot(a, b, allow_tf32=False, out_dtype=tl.float32)
    
    c_ptrs = c_ptr + rm[:, None] * stride_cm + rn[None, :] * stride_cn
    c_mask = (rm[:, None] < M) & (rn[None, :] < N)
    tl.store(c_ptrs, acc, mask=c_mask)

class ModelNew(nn.Module):
    def __init__(self):
        super(ModelNew, self).__init__()
    
    def forward(self, A, B):
        b, i, j, l = A.shape
        k = B.shape[1]
        
        # Ensure contiguous memory layout
        A_flat = A.reshape(-1, l).contiguous()
        B = B.contiguous()
        
        M, K = A_flat.shape
        N = k
        
        C_flat = torch.empty((M, N), device=A.device, dtype=A.dtype)
        
        grid = lambda META: (
            triton.cdiv(M, META['BLOCK_SIZE_M']), 
            triton.cdiv(N, META['BLOCK_SIZE_N']),
        )
        
        _triton_matmul[grid](
            A_flat, B, C_flat,
            M, N, K,
            A_flat.stride(0), A_flat.stride(1),
            B.stride(0), B.stride(1),
            C_flat.stride(0), C_flat.stride(1),
        )
        
        return C_flat.reshape(b, i, j, k)

# Test code
b = 16
i = 256
j = 512
l = 256
k = 768

def get_inputs():
    A = torch.randn(b, i, j, l)
    B = torch.randn(l, k)
    return [A, B]

def get_init_inputs():
    return []  # No special initialization inputs needed
