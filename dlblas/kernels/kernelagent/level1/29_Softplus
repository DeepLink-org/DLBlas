import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def softplus_kernel(
    x_ptr,
    output_ptr,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    x = tl.load(x_ptr + offsets, mask=mask)
    
    # Compute softplus with numerical stability
    threshold = 20.0
    # For x > threshold: softplus(x) â‰ˆ x
    # Otherwise: softplus(x) = log(1 + exp(x))
    result = tl.where(x > threshold, x, tl.log(1 + tl.exp(x)))
    tl.store(output_ptr + offsets, result, mask=mask)

class ModelNew(nn.Module):
    def __init__(self):
        super(ModelNew, self).__init__()
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        original_shape = x.shape
        x_flat = x.flatten()
        n_elements = x_flat.numel()
        
        if n_elements == 0:
            return torch.empty(original_shape, dtype=torch.float32, device=x.device)
        
        output_flat = torch.empty_like(x_flat, dtype=torch.float32)
        BLOCK_SIZE = 1024
        grid = (triton.cdiv(n_elements, BLOCK_SIZE),)
        softplus_kernel[grid](x_flat, output_flat, n_elements, BLOCK_SIZE=BLOCK_SIZE)
        
        return output_flat.reshape(original_shape)

batch_size = 16
dim = 16384

def get_inputs():
    x = torch.randn(batch_size, dim, device='cuda')
    return [x]

def get_init_inputs():
    return []  # No special initialization inputs needed
