import torch
import torch.nn as nn
import triton
import triton.language as tl

# Define Triton kernel for SELU activation
@triton.jit
def selu_kernel(
    x_ptr,
    output_ptr,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    # SELU constants
    alpha = 1.6732632423543772848170429916717
    scale = 1.0507009873554804934193349852946
    
    pid = tl.program_id(axis=0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    
    # Load data
    x = tl.load(x_ptr + offsets, mask=mask)
    
    # Compute SELU activation
    zero = 0.0
    condition = x > zero
    result = tl.where(condition, x, alpha * (tl.exp(x) - 1.0))
    result = scale * result
    
    # Store results
    tl.store(output_ptr + offsets, result, mask=mask)

class ModelNew(nn.Module):
    """
    Optimized model that performs SELU activation using Triton
    """
    def __init__(self):
        super(ModelNew, self).__init__()
    
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        # Process with Triton kernel if on CUDA
        if x.is_cuda:
            x_contiguous = x.contiguous()
            output = torch.empty_like(x_contiguous)
            n_elements = x_contiguous.numel()
            
            if n_elements > 0:
                grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)
                selu_kernel[grid](x_contiguous, output, n_elements, BLOCK_SIZE=1024)
            else:
                output = torch.selu(x_contiguous)
            return output
        
        # Fallback to PyTorch for CPU
        return torch.selu(x)

batch_size = 16
dim = 16384

def get_inputs():
    x = torch.randn(batch_size, dim, device='cuda')
    return [x]

def get_init_inputs():
    return []  # No special initialization inputs needed
