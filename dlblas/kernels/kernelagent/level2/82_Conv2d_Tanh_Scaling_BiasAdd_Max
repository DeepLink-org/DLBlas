import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def fused_tanh_scale_bias_kernel(
    input_ptr,
    bias_ptr,
    output_ptr,
    scaling_factor,
    N, C, H, W,
    stride_n, stride_c, stride_h, stride_w,
    BLOCK_SIZE: tl.constexpr
):
    pid_n = tl.program_id(0)
    pid_c = tl.program_id(1)
    pid_hw = tl.program_id(2)
    
    block_start = pid_hw * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    h = offsets // W
    w = offsets % W
    mask = offsets < (H * W)
    
    bias_val = tl.load(bias_ptr + pid_c)
    
    base_ptr = input_ptr + pid_n * stride_n + pid_c * stride_c
    spatial_offsets = h * stride_h + w * stride_w
    input_ptrs = base_ptr + spatial_offsets
    x = tl.load(input_ptrs, mask=mask, other=0.0)
    
    # Replace tanh with mathematically equivalent sigmoid expression
    tanh_x = 2 * tl.sigmoid(2 * x) - 1
    scaled_tanh = tanh_x * scaling_factor
    result = scaled_tanh + bias_val
    
    output_ptrs = base_ptr + spatial_offsets
    tl.store(output_ptrs, result, mask=mask)

class ModelNew(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, scaling_factor, bias_shape, pool_kernel_size):
        super(ModelNew, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.scaling_factor = scaling_factor
        self.bias = nn.Parameter(torch.randn(bias_shape))
        self.max_pool = nn.MaxPool2d(pool_kernel_size)

    def forward(self, x):
        x = self.conv(x)
        
        if x.is_cuda:
            N, C, H, W = x.shape
            bias_flat = self.bias.view(-1)
            grid = (N, C, (H * W + 255) // 256)
            
            fused_tanh_scale_bias_kernel[grid](
                x, bias_flat, x, 
                self.scaling_factor,
                N, C, H, W,
                x.stride(0), x.stride(1), 
                x.stride(2), x.stride(3),
                BLOCK_SIZE=256
            )
        else:
            x = torch.tanh(x)
            x = x * self.scaling_factor
            x = x + self.bias
        
        x = self.max_pool(x)
        return x

batch_size = 128
in_channels = 3
out_channels = 16
height, width = 32, 32
kernel_size = 3
scaling_factor = 2.0
bias_shape = (out_channels, 1, 1)
pool_kernel_size = 2

def get_inputs():
    return [torch.randn(batch_size, in_channels, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, scaling_factor, bias_shape, pool_kernel_size]
