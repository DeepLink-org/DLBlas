import torch
import torch.nn as nn
import triton
import triton.language as tl
import math

@triton.autotune(
    configs=[
        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32}, num_stages=3, num_warps=8),
        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 32}, num_stages=4, num_warps=4),
        triton.Config({'BLOCK_SIZE_M': 128, 'BLOCK_SIZE_N': 128, 'BLOCK_SIZE_K': 32}, num_stages=3, num_warps=8),
        triton.Config({'BLOCK_SIZE_M': 64, 'BLOCK_SIZE_N': 64, 'BLOCK_SIZE_K': 64}, num_stages=4, num_warps=4),
    ],
    key=['M', 'N', 'K'],
)
@triton.jit
def linear_kernel(
    x_ptr, w_ptr, b_ptr, output_ptr,
    M, N, K,
    stride_xm, stride_xk,
    stride_wn, stride_wk,
    stride_om, stride_on,
    BLOCK_SIZE_M: tl.constexpr, BLOCK_SIZE_N: tl.constexpr, BLOCK_SIZE_K: tl.constexpr,
):
    pid = tl.program_id(0)
    num_pid_n = tl.cdiv(N, BLOCK_SIZE_N)
    pid_m = pid // num_pid_n
    pid_n = pid % num_pid_n

    offs_m = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)
    offs_n = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    
    x_ptrs = x_ptr + offs_m[:, None] * stride_xm + offs_k[None, :] * stride_xk
    w_ptrs = w_ptr + offs_k[:, None] * stride_wk + offs_n[None, :] * stride_wn
    
    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)
    for k in range(0, K, BLOCK_SIZE_K):
        k_remaining = K - k
        k_mask = offs_k < k_remaining
        
        x = tl.load(x_ptrs, mask=k_mask[None, :], other=0.0)
        w = tl.load(w_ptrs, mask=k_mask[:, None], other=0.0)
        
        accumulator += tl.dot(x, w)
        x_ptrs += BLOCK_SIZE_K * stride_xk
        w_ptrs += BLOCK_SIZE_K * stride_wk
    
    if b_ptr is not None:
        b_ptrs = b_ptr + offs_n
        b = tl.load(b_ptrs, mask=offs_n < N, other=0.0)
        accumulator += b[None, :]
    
    offs_m_out = pid_m * BLOCK_SIZE_M + tl.arange(0, BLOCK_SIZE_M)
    offs_n_out = pid_n * BLOCK_SIZE_N + tl.arange(0, BLOCK_SIZE_N)
    out_ptrs = output_ptr + stride_om * offs_m_out[:, None] + stride_on * offs_n_out[None, :]
    out_mask = (offs_m_out[:, None] < M) & (offs_n_out[None, :] < N)
    tl.store(out_ptrs, accumulator, mask=out_mask)

@triton.jit
def _column_max_kernel(
    x_ptr,
    output_ptr,
    batch_size: tl.constexpr,
    out_features: tl.constexpr,
    BLOCK_SIZE: tl.constexpr,
):
    pid_col = tl.program_id(0)
    row_idx = tl.arange(0, BLOCK_SIZE)
    offsets = row_idx * out_features + pid_col
    mask = row_idx < batch_size
    vals = tl.load(x_ptr + offsets, mask=mask, other=-tl.inf(tl.float32))
    max_val = tl.max(vals, axis=0)
    tl.store(output_ptr + pid_col, max_val)

class ModelNew(nn.Module):
    def __init__(self, in_features, out_features, max_dim):
        super(ModelNew, self).__init__()
        self.in_features = in_features
        self.out_features = out_features
        self.max_dim = max_dim
        self.weight = nn.Parameter(torch.empty(out_features, in_features))
        self.bias = nn.Parameter(torch.empty(out_features))
        
        # Initialize weights as in nn.Linear
        nn.init.kaiming_uniform_(self.weight, a=math.sqrt(5))
        if self.bias is not None:
            fan_in, _ = nn.init._calculate_fan_in_and_fan_out(self.weight)
            bound = 1 / math.sqrt(fan_in) if fan_in > 0 else 0
            nn.init.uniform_(self.bias, -bound, bound)

    def forward(self, x):
        if self.max_dim == 1:
            return torch.zeros((x.size(0), 1), device=x.device, dtype=x.dtype)
        else:
            batch_size, _ = x.shape
            M, K = x.shape
            N = self.out_features
            output = torch.empty((M, N), device=x.device, dtype=x.dtype)
            
            # Compute GEMM with Triton kernel
            grid = lambda META: (triton.cdiv(M, META['BLOCK_SIZE_M']) * triton.cdiv(N, META['BLOCK_SIZE_N']),)
            linear_kernel[grid](
                x, self.weight, self.bias, output,
                M, N, K,
                x.stride(0), x.stride(1),
                self.weight.stride(0), self.weight.stride(1),
                output.stride(0), output.stride(1)
            )
            
            # Column-wise max reduction
            max_vals = torch.empty(N, device=x.device, dtype=x.dtype)
            grid_max = (N,)
            _column_max_kernel[grid_max](
                output, max_vals, 
                batch_size, N, 
                BLOCK_SIZE=128
            )
            
            max_vals = max_vals.reshape(1, -1)
            mean_vals = max_vals.mean(dim=1, keepdim=True)
            result = max_vals - mean_vals
            return torch.nn.functional.gelu(result)

batch_size = 128
in_features = 512
out_features = 1024
max_dim = 1

def get_inputs():
    return [torch.randn(batch_size, in_features)]

def get_init_inputs():
    return [in_features, out_features, max_dim]
