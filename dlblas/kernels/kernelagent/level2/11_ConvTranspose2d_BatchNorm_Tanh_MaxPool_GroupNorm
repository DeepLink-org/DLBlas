import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def batchnorm_tanh_kernel(
    x_ptr,
    y_ptr,
    mean_ptr,
    var_ptr,
    weight_ptr,
    bias_ptr,
    eps,
    stride_n, stride_c, 
    H, W,
    BLOCK_SIZE: tl.constexpr,
):
    pid_batch = tl.program_id(0)
    pid_channel = tl.program_id(1)
    
    mean = tl.load(mean_ptr + pid_channel)
    var = tl.load(var_ptr + pid_channel)
    weight = tl.load(weight_ptr + pid_channel)
    bias = tl.load(bias_ptr + pid_channel)
    
    total_spatial = H * W
    x_base_ptr = x_ptr + pid_batch * stride_n + pid_channel * stride_c
    y_base_ptr = y_ptr + pid_batch * stride_n + pid_channel * stride_c

    for block_start in range(0, total_spatial, BLOCK_SIZE):
        offsets = block_start + tl.arange(0, BLOCK_SIZE)
        mask = offsets < total_spatial
        x_val = tl.load(x_base_ptr + offsets, mask=mask)
        
        normalized = (x_val - mean) / tl.sqrt(var + eps)
        scaled = normalized * weight + bias
        out = tl.tanh(scaled)
        
        tl.store(y_base_ptr + offsets, out, mask=mask)

class ModelNew(nn.Module):
    """
    Model that performs a transposed convolution, batch normalization, tanh activation, max pooling, and group normalization.
    """
    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, groups, num_groups):
        super(ModelNew, self).__init__()
        self.conv_transpose = nn.ConvTranspose2d(in_channels, out_channels, kernel_size, stride=stride, padding=padding)
        self.batch_norm = nn.BatchNorm2d(out_channels)
        self.tanh = nn.Tanh()
        self.max_pool = nn.MaxPool2d(kernel_size=2, stride=2)
        self.group_norm = nn.GroupNorm(num_groups=num_groups, num_channels=out_channels)

    def forward(self, x):
        x = self.conv_transpose(x)
        
        if self.training:
            x = self.batch_norm(x)
            x = self.tanh(x)
        else:
            # Ensure contiguous memory layout
            x_contiguous = x.contiguous()
            y = torch.empty_like(x_contiguous)
            grid = (x_contiguous.shape[0], x_contiguous.shape[1])
            batchnorm_tanh_kernel[grid](
                x_contiguous, y,
                self.batch_norm.running_mean, 
                self.batch_norm.running_var,
                self.batch_norm.weight, 
                self.batch_norm.bias,
                self.batch_norm.eps,
                x_contiguous.stride(0), x_contiguous.stride(1), 
                x_contiguous.size(2), x_contiguous.size(3),
                BLOCK_SIZE=1024
            )
            x = y
        
        x = self.max_pool(x)
        x = self.group_norm(x)
        return x

batch_size = 128
in_channels = 32
out_channels = 64
kernel_size = 4
stride = 2
padding = 1
groups = 8
num_groups = 4
height, width = 32, 32

def get_inputs():
    return [torch.randn(batch_size, in_channels, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, stride, padding, groups, num_groups]
