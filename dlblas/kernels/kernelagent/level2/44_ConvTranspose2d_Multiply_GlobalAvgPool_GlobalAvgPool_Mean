import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def fused_global_avg_pool_multiply(
    x_ptr,
    output_ptr,
    multiplier,
    B, C, H, W,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(0)
    bc = pid
    b = bc // C
    c = bc % C

    base = b * C * H * W + c * H * W
    total_elements = H * W
    total_sum = 0.0

    for i in range(0, total_elements, BLOCK_SIZE):
        offsets = base + i + tl.arange(0, BLOCK_SIZE)
        mask = (i + tl.arange(0, BLOCK_SIZE)) < total_elements
        chunk = tl.load(x_ptr + offsets, mask=mask, other=0.0)
        total_sum += tl.sum(chunk, axis=0)

    mean_val = total_sum / total_elements
    result = mean_val * multiplier
    tl.store(output_ptr + b * C + c, result)

class ModelNew(nn.Module):
    """
    Model that performs a transposed convolution, multiplies by a scalar, applies global average pooling, 
    another global average pooling
    """
    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, output_padding, multiplier):
        super(ModelNew, self).__init__()
        self.conv_transpose = nn.ConvTranspose2d(in_channels, out_channels, kernel_size, stride=stride, padding=padding, output_padding=output_padding)
        self.multiplier = multiplier

    def forward(self, x):
        x = self.conv_transpose(x)
        B, C, H, W = x.shape
        output = torch.empty(B, C, 1, 1, device=x.device, dtype=x.dtype)
        grid = (B * C,)
        BLOCK_SIZE = 1024
        fused_global_avg_pool_multiply[grid](x, output, self.multiplier, B, C, H, W, BLOCK_SIZE=BLOCK_SIZE)
        return output

batch_size = 128
in_channels = 3
out_channels = 16
height, width = 32, 32
kernel_size = 3
stride = 2
padding = 1
output_padding = 1
multiplier = 0.5

def get_inputs():
    return [torch.randn(batch_size, in_channels, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, stride, padding, output_padding, multiplier]
