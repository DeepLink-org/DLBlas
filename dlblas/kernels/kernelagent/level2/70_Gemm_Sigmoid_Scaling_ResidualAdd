import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def _sigmoid_scaled_add_kernel(
    x_ptr,
    output_ptr,
    scaling_factor,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    x = tl.load(x_ptr + offsets, mask=mask)
    sigmoid_x = 1.0 / (1.0 + tl.exp(-x))
    scaled_sigmoid = sigmoid_x * scaling_factor
    result = scaled_sigmoid + x
    tl.store(output_ptr + offsets, result, mask=mask)

def sigmoid_scaled_add(x: torch.Tensor, scaling_factor: float):
    x = x.contiguous()
    output = torch.empty_like(x)
    n_elements = x.numel()
    if n_elements == 0:
        return output
    grid = (triton.cdiv(n_elements, 1024),)
    _sigmoid_scaled_add_kernel[grid](x, output, scaling_factor, n_elements, BLOCK_SIZE=1024)
    return output

class ModelNew(nn.Module):
    """
    Model implementing the pattern "Gemm_Sigmoid_Scaling_ResidualAdd".
    """
    def __init__(self, input_size, hidden_size, scaling_factor):
        super(ModelNew, self).__init__()
        self.gemm = nn.Linear(input_size, hidden_size)
        self.scaling_factor = scaling_factor

    def forward(self, x):
        """
        Forward pass of the model.

        Args:
            x (torch.Tensor): Input tensor of shape (batch_size, input_size).

        Returns:
            torch.Tensor: Output tensor of shape (batch_size, hidden_size).
        """
        x = self.gemm(x)
        x = sigmoid_scaled_add(x, self.scaling_factor)
        return x

batch_size = 128
input_size = 1024
hidden_size = 512
scaling_factor = 2.0

def get_inputs():
    return [torch.randn(batch_size, input_size)]

def get_init_inputs():
    return [input_size, hidden_size, scaling_factor]
