import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def fused_ops_kernel(
    input_ptr,
    output_ptr,
    sub1,
    sub2,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    
    x = tl.load(input_ptr + offsets, mask=mask)
    x = x - sub1
    # Manual tanh implementation with clamping for numerical stability
    clamped = tl.minimum(tl.maximum(x, -50.0), 50.0)
    exp2x = tl.exp(2.0 * clamped)
    tanh_x = (exp2x - 1.0) / (exp2x + 1.0)
    x = tanh_x - sub2
    tl.store(output_ptr + offsets, x, mask=mask)

class ModelNew(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, subtract1_value, subtract2_value, kernel_size_pool):
        super(ModelNew, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.subtract1_value = subtract1_value
        self.subtract2_value = subtract2_value
        self.avgpool = nn.AvgPool2d(kernel_size_pool)

    def forward(self, x):
        x = self.conv(x)
        
        # Fused pointwise operations using Triton
        x_contig = x.contiguous()
        output = torch.empty_like(x_contig)
        n_elements = x_contig.numel()
        grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)
        fused_ops_kernel[grid](
            x_contig, output, 
            self.subtract1_value, self.subtract2_value,
            n_elements, BLOCK_SIZE=1024
        )
        x = output
        
        x = self.avgpool(x)
        return x

batch_size = 128
in_channels = 3
out_channels = 16
height, width = 32, 32
kernel_size = 3
subtract1_value = 0.5
subtract2_value = 0.2
kernel_size_pool = 2

def get_inputs():
    return [torch.randn(batch_size, in_channels, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, subtract1_value, subtract2_value, kernel_size_pool]
