import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def _activation_kernel(
    x_ptr,
    output_ptr,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    x = tl.load(x_ptr + offsets, mask=mask)
    softplus_x = tl.log(1.0 + tl.exp(x))
    # Compute tanh using exponential form
    exp_2x = tl.exp(2 * softplus_x)
    tanh_softplus = (exp_2x - 1.0) / (exp_2x + 1.0)
    output = x * tanh_softplus
    tl.store(output_ptr + offsets, output, mask=mask)

class ModelNew(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, eps=1e-5, momentum=0.1):
        super(ModelNew, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.bn = nn.BatchNorm2d(out_channels, eps=eps, momentum=momentum)
    
    def forward(self, x):
        x = self.conv(x)
        # Apply optimized activation kernel
        output = torch.empty_like(x)
        n_elements = x.numel()
        grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)
        _activation_kernel[grid](x, output, n_elements, BLOCK_SIZE=1024)
        x = self.bn(output)
        return x

batch_size = 128
in_channels = 3
out_channels = 16
height, width = 32, 32
kernel_size = 3

def get_inputs():
    return [torch.randn(batch_size, in_channels, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size]
