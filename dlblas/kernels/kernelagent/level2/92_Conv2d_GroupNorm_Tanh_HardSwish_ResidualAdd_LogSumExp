import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def fused_pointwise(
    x_conv_ptr, 
    x_norm_ptr, 
    output_ptr,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements

    x_conv = tl.load(x_conv_ptr + offsets, mask=mask)
    x_norm = tl.load(x_norm_ptr + offsets, mask=mask)

    # Compute tanh(x) = (e^x - e^{-x}) / (e^x + e^{-x})
    exp_x = tl.exp(x_norm)
    exp_negx = tl.exp(-x_norm)
    x_tanh = (exp_x - exp_negx) / (exp_x + exp_negx)

    temp = tl.maximum(tl.minimum(x_tanh + 3.0, 6.0), 0.0)
    x_hard_swish = x_tanh * temp / 6.0
    x_res = x_conv + x_hard_swish

    tl.store(output_ptr + offsets, x_res, mask=mask)

def fused_pointwise_op(x_conv, x_norm):
    output = torch.empty_like(x_conv)
    n_elements = output.numel()
    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']), )
    fused_pointwise[grid](x_conv, x_norm, output, n_elements, BLOCK_SIZE=1024)
    return output

class ModelNew(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, groups, eps=1e-5):
        super(ModelNew, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size)
        self.group_norm = nn.GroupNorm(groups, out_channels, eps=eps)

    def forward(self, x):
        x_conv = self.conv(x)
        x_norm = self.group_norm(x_conv)
        x_res = fused_pointwise_op(x_conv, x_norm)
        x_logsumexp = torch.logsumexp(x_res, dim=1, keepdim=True)
        return x_logsumexp

batch_size = 128
in_channels = 3
out_channels = 16
height, width = 32, 32
kernel_size = 3
groups = 8

def get_inputs():
    return [torch.randn(batch_size, in_channels, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, groups]
