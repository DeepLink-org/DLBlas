import torch
import torch.nn as nn
import triton
import triton.language as tl
import math

@triton.jit
def _pointwise_kernel(
    x_ptr,
    scaling_ptr,
    bias_ptr,
    output_ptr,
    n_elements,
    channel_size: tl.constexpr,
    out_channels: tl.constexpr,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    
    # Load input
    x = tl.load(x_ptr + offsets, mask=mask)
    
    # Calculate channel index
    channel_idx = (offsets // channel_size) % out_channels
    
    # Load parameters
    scale = tl.load(scaling_ptr + channel_idx, mask=mask)
    bias_val = tl.load(bias_ptr + channel_idx, mask=mask)
    
    # Pointwise operations with math implementations
    x = x * scale
    # tanh approximation: 2*sigmoid(2x) - 1
    x = 2.0 * (1.0 / (1.0 + tl.exp(-2.0 * x))) - 1.0
    x = x * bias_val
    # Sigmoid implementation
    x = 1.0 / (1.0 + tl.exp(-x))
    
    # Store result
    tl.store(output_ptr + offsets, x, mask=mask)

class ModelNew(nn.Module):
    def __init__(self, in_channels, out_channels, kernel_size, scaling_factor, bias_shape):
        super(ModelNew, self).__init__()
        self.conv = nn.Conv3d(in_channels, out_channels, kernel_size)
        self.scaling_factor = nn.Parameter(torch.randn(bias_shape))
        self.bias = nn.Parameter(torch.randn(bias_shape))

    def forward(self, x):
        # Conv operation remains in PyTorch
        x = self.conv(x)
        
        # Fuse pointwise operations with Triton
        output = torch.empty_like(x)
        n_elements = x.numel()
        channel_size = x.shape[2] * x.shape[3] * x.shape[4]
        
        # Launch kernel
        grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)
        _pointwise_kernel[grid](
            x, 
            self.scaling_factor.view(-1), 
            self.bias.view(-1), 
            output,
            n_elements,
            channel_size,
            self.bias.size(0),
            BLOCK_SIZE=1024
        )
        
        return output

batch_size = 128
in_channels = 3
out_channels = 16
depth, height, width = 16, 32, 32
kernel_size = 3
scaling_factor = 2
bias_shape = (out_channels, 1, 1, 1)

def get_inputs():
    return [torch.randn(batch_size, in_channels, depth, height, width)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size, scaling_factor, bias_shape]
