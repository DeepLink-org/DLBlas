import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def mish_tanh_fusion_kernel(
    x_ptr,
    output_ptr,
    n_elements,
    BLOCK_SIZE: tl.constexpr,
):
    pid = tl.program_id(0)
    block_start = pid * BLOCK_SIZE
    offsets = block_start + tl.arange(0, BLOCK_SIZE)
    mask = offsets < n_elements
    x = tl.load(x_ptr + offsets, mask=mask)
    
    # Compute softplus: log(1+exp(x))
    softplus_x = tl.log(1.0 + tl.exp(x))
    
    # Compute tanh(softplus_x) using exponential formula
    neg_two_softplus = -2.0 * softplus_x
    exp_term1 = tl.exp(neg_two_softplus)
    tanh_softplus = (1.0 - exp_term1) / (1.0 + exp_term1)
    
    mish = x * tanh_softplus
    
    # Compute tanh(mish) using exponential formula
    neg_two_mish = -2.0 * mish
    exp_term2 = tl.exp(neg_two_mish)
    z = (1.0 - exp_term2) / (1.0 + exp_term2)
    
    tl.store(output_ptr + offsets, z, mask=mask)

def mish_tanh_fusion(x):
    # Ensure tensor is contiguous for kernel safety
    x = x.contiguous()
    n_elements = x.numel()
    grid = lambda meta: (triton.cdiv(n_elements, meta['BLOCK_SIZE']),)
    mish_tanh_fusion_kernel[grid](x, x, n_elements, BLOCK_SIZE=1024)
    return x

class ModelNew(nn.Module):
    """
    Model that performs a 3D convolution, applies Mish activation, and then applies Tanh activation.
    """
    def __init__(self, in_channels, out_channels, kernel_size, stride=1, padding=0):
        super(ModelNew, self).__init__()
        self.conv = nn.Conv3d(in_channels, out_channels, kernel_size, stride=stride, padding=padding)

    def forward(self, x):
        """
        Args:
            x (torch.Tensor): Input tensor of shape (batch_size, in_channels, D, H, W).

        Returns:
            torch.Tensor: Output tensor of shape (batch_size, out_channels, D', H', W').
        """
        x = self.conv(x)
        x = mish_tanh_fusion(x)
        return x

batch_size = 16
in_channels = 3
out_channels = 16
D, H, W = 16, 32, 32
kernel_size = 3

def get_inputs():
    return [torch.randn(batch_size, in_channels, D, H, W)]

def get_init_inputs():
    return [in_channels, out_channels, kernel_size]
