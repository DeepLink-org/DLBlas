import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def leaky_gemm_kernel(
    x_ptr, weight_ptr, bias_ptr, output_ptr,
    multiplier, negative_slope,
    batch_size, in_features, out_features,
    stride_x0, stride_x1, stride_w0, stride_w1,
    BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, BLOCK_K: tl.constexpr
):
    pid0 = tl.program_id(0)
    pid1 = tl.program_id(1)

    offs_m = pid0 * BLOCK_M + tl.arange(0, BLOCK_M)
    offs_n = pid1 * BLOCK_N + tl.arange(0, BLOCK_N)
    offs_k = tl.arange(0, BLOCK_K)

    x_ptrs = x_ptr + (offs_m[:, None] * stride_x0 + offs_k[None, :] * stride_x1)
    w_ptrs = weight_ptr + (offs_k[:, None] * stride_w1 + offs_n[None, :] * stride_w0)

    acc = tl.zeros((BLOCK_M, BLOCK_N), dtype=tl.float32)
    
    for k in range(0, in_features, BLOCK_K):
        k_remaining = in_features - k
        k_mask = offs_k < k_remaining
        
        x_mask = (offs_m < batch_size)[:, None] & k_mask[None, :]
        w_mask = k_mask[:, None] & (offs_n < out_features)[None, :]
        
        x_chunk = tl.load(x_ptrs, mask=x_mask, other=0.0)
        w_chunk = tl.load(w_ptrs, mask=w_mask, other=0.0)
        
        acc += tl.dot(x_chunk, w_chunk, allow_tf32=True)
        x_ptrs += BLOCK_K * stride_x1
        w_ptrs += BLOCK_K * stride_w1

    if bias_ptr is not None:
        b_ptrs = bias_ptr + offs_n
        b = tl.load(b_ptrs, mask=offs_n < out_features, other=0.0)
        acc += b[None, :]
    
    acc = acc * multiplier
    acc = tl.where(acc >= 0, acc, acc * negative_slope)
    
    out_ptrs = output_ptr + (offs_m[:, None] * out_features + offs_n[None, :])
    out_mask = (offs_m < batch_size)[:, None] & (offs_n < out_features)[None, :]
    tl.store(out_ptrs, acc, mask=out_mask)

class ModelNew(nn.Module):
    def __init__(self, in_features, out_features, multiplier, negative_slope):
        super().__init__()
        self.gemm = nn.Linear(in_features, out_features)
        self.multiplier = multiplier
        self.negative_slope = negative_slope

    def forward(self, x):
        batch_size, in_dim = x.shape
        out_dim = self.gemm.out_features
        
        grid = lambda meta: (
            triton.cdiv(batch_size, meta['BLOCK_M']),
            triton.cdiv(out_dim, meta['BLOCK_N'])
        )
        
        output = torch.empty((batch_size, out_dim), device=x.device, dtype=x.dtype)
        leaky_gemm_kernel[grid](
            x, self.gemm.weight, self.gemm.bias, output,
            self.multiplier, self.negative_slope,
            batch_size, in_dim, out_dim,
            x.stride(0), x.stride(1),
            self.gemm.weight.stride(0), self.gemm.weight.stride(1),
            BLOCK_M=64, BLOCK_N=128, BLOCK_K=64
        )
        return output

batch_size = 128
in_features = 1024
out_features = 512
multiplier = 2.0
negative_slope = 0.1

def get_inputs():
    return [torch.randn(batch_size, in_features)]

def get_init_inputs():
    return [in_features, out_features, multiplier, negative_slope]
