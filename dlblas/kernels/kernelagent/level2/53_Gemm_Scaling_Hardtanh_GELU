import math
import torch
import torch.nn as nn
import triton
import triton.language as tl

@triton.jit
def fused_gemm_activation_kernel(
    x_ptr, w_ptr, b_ptr, output_ptr,
    scaling_factor, hardtanh_min, hardtanh_max,
    batch_size, in_features, out_features,
    stride_xb, stride_xf,
    stride_wo, stride_wi,
    stride_ob, stride_of,
    BLOCK_M: tl.constexpr, BLOCK_N: tl.constexpr, BLOCK_K: tl.constexpr
):
    pid_m = tl.program_id(0)
    pid_n = tl.program_id(1)
    
    offs_batch = pid_m * BLOCK_M + tl.arange(0, BLOCK_M)
    offs_out = pid_n * BLOCK_N + tl.arange(0, BLOCK_N)
    offs_in = tl.arange(0, BLOCK_K)
    
    x_ptrs = x_ptr + offs_batch[:, None] * stride_xb + offs_in[None, :] * stride_xf
    w_ptrs = w_ptr + offs_in[:, None] * stride_wi + offs_out[None, :] * stride_wo
    
    acc = tl.zeros((BLOCK_M, BLOCK_N), dtype=tl.float32)
    for k in range(0, tl.cdiv(in_features, BLOCK_K)):
        cols = k * BLOCK_K + offs_in
        mask_in = cols < in_features
        
        mask_x = (offs_batch[:, None] < batch_size) & mask_in[None, :]
        x_chunk = tl.load(x_ptrs, mask=mask_x, other=0.0)
        
        mask_w = mask_in[:, None] & (offs_out[None, :] < out_features)
        w_chunk = tl.load(w_ptrs, mask=mask_w, other=0.0)
        
        acc += tl.dot(x_chunk, w_chunk, allow_tf32=True)
        x_ptrs += BLOCK_K * stride_xf
        w_ptrs += BLOCK_K * stride_wi
    
    b_ptrs = b_ptr + offs_out
    mask_b = offs_out < out_features
    bias = tl.load(b_ptrs, mask=mask_b, other=0.0)
    acc += bias[None, :]
    
    acc = acc * scaling_factor
    acc = tl.minimum(tl.maximum(acc, hardtanh_min), hardtanh_max)
    acc = acc * 0.5 * (1.0 + tl.erf(acc * 0.7071067811865476))
    
    out_ptrs = output_ptr + offs_batch[:, None] * stride_ob + offs_out[None, :] * stride_of
    mask_out = (offs_batch[:, None] < batch_size) & (offs_out[None, :] < out_features)
    tl.store(out_ptrs, acc, mask=mask_out)

class ModelNew(nn.Module):
    def __init__(self, in_features, out_features, scaling_factor, hardtanh_min, hardtanh_max):
        super(ModelNew, self).__init__()
        self.weight = nn.Parameter(torch.empty(out_features, in_features))
        self.bias = nn.Parameter(torch.empty(out_features))
        self.scaling_factor = scaling_factor
        self.hardtanh_min = hardtanh_min
        self.hardtanh_max = hardtanh_max
        
        nn.init.kaiming_uniform_(self.weight, a=math.sqrt(5))
        fan_in, _ = nn.init._calculate_fan_in_and_fan_out(self.weight)
        bound = 1 / math.sqrt(fan_in) if fan_in > 0 else 0
        nn.init.uniform_(self.bias, -bound, bound)

    def forward(self, x):
        output = torch.empty((x.size(0), self.weight.size(0)), 
                             device=x.device, dtype=x.dtype)
        
        grid = lambda opt: (
            triton.cdiv(x.size(0), 64), 
            triton.cdiv(self.weight.size(0), 128)
        )
        
        fused_gemm_activation_kernel[grid](
            x, self.weight, self.bias, output,
            self.scaling_factor, self.hardtanh_min, self.hardtanh_max,
            x.size(0), self.weight.size(1), self.weight.size(0),
            x.stride(0), x.stride(1),
            self.weight.stride(0), self.weight.stride(1),
            output.stride(0), output.stride(1),
            BLOCK_M=64, BLOCK_N=128, BLOCK_K=64
        )
        return output

batch_size = 128
in_features = 1024
out_features = 512
scaling_factor = 0.5
hardtanh_min = -2
hardtanh_max = 2

def get_inputs():
    return [torch.randn(batch_size, in_features)]

def get_init_inputs():
    return [in_features, out_features, scaling_factor, hardtanh_min, hardtanh_max]
